
///3408. Design Task Manager
typedef pair<int,int> P;
    priority_queue<P> maxHeap;      ////priority, taskID
    unordered_map<int,int> taskPriorMap;    //taskID->priority
    unordered_map<int,int> taskOwnerMap;    /////taskID-> userID
    TaskManager(vector<vector<int>>& tasks) {
        for(auto &task: tasks){
            add(task[0],task[1],task[2]);
        }
    }
    
    void add(int userId, int taskId, int priority) {
        maxHeap.push({priority, taskId});
        taskPriorMap[taskId]=priority;
        taskOwnerMap[taskId]=userId;

    }
    
    void edit(int taskId, int newPriority) {
        maxHeap.push({newPriority,taskId});
        taskPriorMap[taskId]=newPriority;
    }
    
    void rmv(int taskId) {
        taskPriorMap[taskId]=-1;
    }
    
    int execTop() {
        while(!maxHeap.empty()){
            auto [prio,taskId]=maxHeap.top();
            maxHeap.pop();

            if(prio==taskPriorMap[taskId]){ ////fresh (not used)
                taskPriorMap[taskId]=-1;
                return taskOwnerMap[taskId];
            }
        }
        return -1;
    }