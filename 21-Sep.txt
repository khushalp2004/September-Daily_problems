
////1912. Design Movie Rental System

struct AvailCmp{
        bool operator()(const pair<int,int>& a,const pair<int,int>& b) const{
            if(a.first==b.first){
                return a.second<b.second;
            }
            return a.first<b.first;
        }
    };

    struct RentCmp{
        bool operator()(const tuple<int,int,int>& a,const tuple<int,int,int> & b) const{
            if(get<0>(a)==get<0>(b)){
                if(get<1>(a)==get<1>(b)){
                    return get<2>(a) < get<2>(b);
                }
                return get<1>(a) < get<1>(b);
            }
            return get<0>(a) < get<0>(b);
        }
    };

    unordered_map<int,unordered_map<int,int>> price;
    unordered_map<int, set<pair<int,int>,AvailCmp>> available;
    set<tuple<int,int,int>,RentCmp> rented;  
    MovieRentingSystem(int n, vector<vector<int>>& entries) {
        for(auto &e: entries){
            int shop=e[0],movie=e[1],p=e[2];
            price[shop][movie]=p;
            available[movie].insert({p,shop});
        }
    }
    
    vector<int> search(int movie) {
        vector<int> res;
        if(available.count(movie)){
            auto &s=available[movie];
            int count=0;
            for(auto it=s.begin();it!=s.end() && count<5;it++,count++){
                res.push_back(it->second);
            }
        }
        return res;
    }
    
    void rent(int shop, int movie) {
        int p=price[shop][movie];
        available[movie].erase({p,shop});
        rented.insert({p,shop,movie});
    }
    
    void drop(int shop, int movie) {
        int p=price[shop][movie];
        rented.erase({p,shop,movie});
        available[movie].insert({p,shop});
    }
    
    vector<vector<int>> report() {
        vector<vector<int>> res;
        int count=0;
        for(auto it=rented.begin();it!=rented.end() && count<5;it++,count++){
            res.push_back({get<1>(*it),get<2>(*it)});
        }
        return res;
    }